"sjmisc", "sjPlot", "slam", "stringi", "testthat", "topicmodels", "tseries", "zoo"))
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d",
"sjmisc"))
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d",
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d"))
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d"))
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d"))
install.packages(c("rsconnect", "RWeka", "RWekajars", "scatterplot3d"))
install.packages(c("rsconnect"))
install.packages(c("rsconnect"))
install.packages(c("sjmisc", "sjPlot", "slam", "stringi", "testthat", "topicmodels", "tseries", "zoo"))
install.packages("plyr")
library(installr)
?updateR
updateR()
install.packages(c("plyr", "proxy", "psych", "qdap", "Rglpk", "ROI", "ROI.plugin.glpk", "ROI.plugin.quadprog", "rpart.plot", "rstudioapi", "rvest", "RWeka", "sjPlot", "slam", "swirl", "tidyr", "withr", "xml2"))
getwd()
nxpSubscribers <- read.delim("NXP_subscriber_data.txt", header = F,
stringsAsFactors = F)
head(nxpSubscribers)
length(nxpSubscribers[,2])
numTrans <- length(nxpSubscribers[,2])
suppressWarnings(suppressMessages(library(data.table)))
nxp.DT <- data.table(nxpSubscribers)
nxp.DT[, Trans := 1:numTrans]
colnames(nxpSubscribers) <- c("PartID", "Accept", "BeginDt", "EndDt", "TransDt",
"RiskStart", "RiskEnd")
head(nxpSubscribers)
numTrans <- length(nxpSubscribers$PartID)
rm(nxp.DT)
nxp.DT <- data.table(nxpSubscribers)
nxp.DT[, Trans := 1:numTrans]
setkey(nxp.DT, PartID, TransDt, Trans)
nxp.DT
nxp.DT[, .(RiskEnd, Trans), by = .(PartID, TransDt)]
nxp.DT[Trans == nxp.DT[, .(RiskEnd, Trans), by = .(PartID, TransDt)][, Trans],]
maxTrans <- nxp.DT[, max(Trans), by = .(PartID, TransDt)]
maxTrans
maxTrans <- nxp.DT[, maxTrans := max(Trans), by = .(PartID, TransDt)]
setkey(maxTrans, PartID, TransDt)
maxTrans <- nxp.DT[, Trans := max(Trans), by = .(PartID, TransDt)]
setkey(maxTrans, PartID, TransDt, Trans)
maxTrans[nxp.DT[, RiskEnd] ]
rm(maxTrans)
maxTrans <- nxp.DT[, Trans := max(Trans), by = .(PartID, TransDt)]
setkey(maxTrans, PartID, TransDt, Trans)
maxTrans[nxp.DT[, RiskEnd] ]
nxp.DT[maxTrans]
rm(maxTrans)
maxTrans <- nxp.DT[, Trans2 := max(Trans), by = .(PartID, TransDt)]
nxp.DT[, Trans2 := max(Trans), by = .(PartID, TransDt)]
nxp.DT
rm(list = ls())
nxpSubscribers <- read.delim("NXP_subscriber_data.txt", header = F,
stringsAsFactors = F)
head(nxpSubscribers)
colnames(nxpSubscribers) <- c("PartID", "Accept", "BeginDt", "EndDt", "TransDt",
"RiskStart", "RiskEnd")
numTrans <- length(nxpSubscribers$PartID)
suppressWarnings(suppressMessages(library(data.table)))
nxp.DT <- data.table(nxpSubscribers)
nxp.DT[, Trans := 1:numTrans]
setkey(nxp.DT, PartID, TransDt, Trans)
nxp.DT[, Trans2 := max(Trans), by = .(PartID, TransDt)]
nxp.DT
nxp.DT[Trans == Trans2]
nxp.DT[Trans == Trans2 & Accept == "Y"]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944, .(PartID, TransDt,
RiskStart, RiskEnd)]
str(nxp.DT)
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944,
.(PartID, TransDt, RiskStart, RiskEnd)][, .N()]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944,
.(PartID, TransDt, RiskStart, RiskEnd)][, .N(), by = PartID]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944,
.N(), by = PartID]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944,
.n(), by = PartID]
nxp.DT[Trans == Trans2 & Accept == "Y" & PartID == 14944,
.N, by = PartID]
nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID]
table(nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][, N])
.N, by = PartID][N == 1]
nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 1,]
nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 1, PartID]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 1, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 2, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 2, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 2, PartID] &
Trans == Trans2 ]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
grepl("2008", BeginDt),
.N, by = PartID][N == 2, PartID] &
Trans == Trans2 ]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
grepl("2008", BeginDt),
.N, by = PartID][N == 2, PartID]
]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" ,
.N, by = PartID][N == 2, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
BeginDt < "1/01/2009",
.N, by = PartID][N == 2, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" ,
.N, by = PartID][N == 2, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" ,
.N, by = PartID][N == 3, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
grepl("2007", BeginDt),
.N, by = PartID][N == 3, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
grepl("2007", BeginDt),
.N, by = PartID][N == 3, ]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y" &
grepl("2007", BeginDt),
.N, by = PartID][N == 4, ]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 4, ]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 2, ]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 5, PartID]]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 5 &
Trans == Trans2, PartID]]
nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID]
nxp.DT[PartID %in% nxp.DT[Trans == Trans2 & Accept == "Y",
.N, by = PartID][N == 5 &
Trans == Trans2, PartID],]
require(rvest)
straightURL <- paste0("http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=", week)
week = 1
confURL <- paste0(straightURL, "&type=c")
straightURL <- paste0("http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=", week)
confURL <- paste0(straightURL, "&type=c")
distConf_parsed <- read_html(confURL, encoding = "UTF-8") #, verbose = T)
distConfList <- html_text(html_nodes(distConf_parsed, "div div")) # "#bd"))
distConfList
fansConfRaw <- stri_split_regex(distConfList, "\\n")
require(stringi)
fansConfRaw <- stri_split_regex(distConfList, "\\n")
teams <- sapply(fansConfRaw[[1]][which(grepl("Percentage", fansConfRaw[[1]])) - 1], trimws)
grepl("Percentage", fansConfRaw[[1]])
fansConfRaw[[1]]
trimws
grepl("Percentage", fansConfRaw
)
teams <- sapply(fansConfRaw[which(grepl("Percentage", fansConfRaw)) - 1], trimws)
teams <- sapply(teams, translate)
translate <- function(teamName){
wtpNames <- read.delim("nflTeams.txt", header = F, stringsAsFactors = F)
yahooNames <- wtpNames
yahooNames[sapply(yahooNames, grepl, pattern = "N.Y. Giants")] <- "New York (NYG)"
yahooNames[sapply(yahooNames, grepl, pattern = "N.Y. Jets")] <- "New York (NYJ)"
NFLdf <- cbind(wtpNames, yahooNames)
colnames(NFLdf) <- c("WTP", "Yahoo")
NFLmap <- data.table(NFLdf)
NFLmap[, `:=`(WTPhome = paste0("@", WTP), YahooHome = paste0("@ ", Yahoo))]
ifelse(grepl("@", teamName), NFLmap[YahooHome == teamName, WTPhome], NFLmap[Yahoo == teamName, WTP])
}
teams <- sapply(teams, translate)
# Universal functions and data for WTP web scraping
rm(list = ls())
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
library(memisc)
#rm(wtpNames, yahooNames, NFLdf)
winProb <- function(spread){
if(is.numeric(spread)){
1-pnorm(spread, sd=13.3, lower.tail = T)
} else {
NA
}
}
victorProb <- function(prob){max(prob, 1 - prob)}
# Functions for point spread data from Covers
genNFLtables <- function(){
coversNFL_parsed <- read_html("http://www.covers.com/odds/football/nfl-spreads.aspx", encoding = "UTF-8")
html_table(coversNFL_parsed, fill = TRUE) # html_table() from the revest package, which replac
}
genNFLSchedule <- function(NFLtable){#NFLtable <- genNFLtables()
unlist(stri_split_regex(NFLtable[[3]]$X1[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
}
subOFFpk <- function(charVec){ #charVec = "the line is pk and the overunder is OFF"
pseudoLine <- round(runif(1) - .5, 1)
subPK <- gsub("pk", pseudoLine, charVec)
pseudoLine <- round(runif(1) - .5,1)
outCharVec <- gsub("OFF", pseudoLine, subPK)
outCharVec
} #subPK("the line is pk and the overunder is OFF")
genWPMatrix <- function(nGames, NFLtable){#nGames = 16; NFLtable = tablesNFL; nGames = numGames
winProbMatrix <- matrix(rep(0.0, 7 * nGames), nrow = nGames)
#NFLtable <- genNFLtables()
lines <- unlist(stri_split_regex(NFLtable[[3]]$X4[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- sapply(lines, subOFFpk)
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 1] <- sapply(as.numeric(V2sub), winProb)
# Hey, TMA: Add $X5 for open and apply weighting of 30% to open prob
lines <- unlist(stri_split_regex(NFLtable[[3]]$X5[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 2] <- sapply(as.numeric(V2sub), winProb)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X6[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 3] <- sapply(as.numeric(V2sub), winProb)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X7[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 4] <- sapply(as.numeric(V2sub), winProb)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X8[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 5] <- sapply(as.numeric(V2sub), winProb)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X9[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 6] <- sapply(as.numeric(V2sub), winProb)
lines <- unlist(stri_split_regex(NFLtable[[3]]$X10[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
lines <- unlist(stri_split_regex(lines, "\\t"))
linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 5)])
V2sub <- sapply(linesMatrix[, V2], subOFFpk)
winProbMatrix[, 7] <- sapply(as.numeric(V2sub), winProb)
# lines <- unlist(stri_split_regex(NFLtable[[3]]$X11[grepl("@", NFLtable[[3]]$X1)], "\\r\\n"))
# lines <- unlist(stri_split_regex(lines, "\\t"))
# linesMatrix <- data.table(matrix(lines, nrow = nGames, byrow = T)[, c(1, 11)])
# V2sub <- sapply(linesMatrix[, V2], subOFFpk)
# winProbMatrix[, 8] <- sapply(as.numeric(V2sub), winProb)
### Note Column 2 is the Opening WinProb
winProbMatrix
}
genGameMatrix <- function(schedule, NFLtable){#schedule = genNFLSchedule(NFLtable)
numGames <<- length(schedule)/4
gMatrix <- data.table(matrix(schedule, nrow = numGames, byrow = T)[, c(1, 4)])
setnames(gMatrix, c("V1", "V2"), c("Visitor", "Home"))
gMatrix[, Home := stri_trim_left(gMatrix[, Home], pattern = "\\P{Wspace}")]
wpMatrix <- genWPMatrix(numGames, NFLtable)
#gMatrix[, WPHome := apply(wpMatrix[, c(1, 3:7)], 1, mean, na.rm = T)]
gMatrix[, WPHome := wpMatrix[, 2] * .3 +
.7 * apply(wpMatrix[, c(1, 3:7)], 1, mean, na.rm = T)]
gMatrix[, Victor := ifelse(WPHome >= .5, Home, Visitor)]
gMatrix[, Underdog := ifelse(WPHome < .5, Home, Visitor)]
gMatrix[, WinProbability := round(sapply(WPHome, victorProb),4)]
gMatrix[, Confidence := frank(WinProbability, ties.method = "random")]
gMatrix[, Game := paste0(Visitor, Home)]
setkey(gMatrix, Game)
gMatrix[, `:=`(Visitor = NULL, Home = NULL, WPHome = NULL)]
setcolorder(gMatrix, c("Confidence", "Victor", "WinProbability", "Game", "Underdog"))
gMatrix
}
### Functions for fan pick distributions from Yahoo
labelGame <- function(text1, text2){
ifelse(grepl("@", text1), paste0(text2, text1), paste0(text1, text2))
}
translate <- function(teamName){
wtpNames <- read.delim("nflTeams.txt", header = F, stringsAsFactors = F)
yahooNames <- wtpNames
yahooNames[sapply(yahooNames, grepl, pattern = "N.Y. Giants")] <- "New York (NYG)"
yahooNames[sapply(yahooNames, grepl, pattern = "N.Y. Jets")] <- "New York (NYJ)"
NFLdf <- cbind(wtpNames, yahooNames)
colnames(NFLdf) <- c("WTP", "Yahoo")
NFLmap <- data.table(NFLdf)
NFLmap[, `:=`(WTPhome = paste0("@", WTP), YahooHome = paste0("@ ", Yahoo))]
ifelse(grepl("@", teamName), NFLmap[YahooHome == teamName, WTPhome], NFLmap[Yahoo == teamName, WTP])
}
week = 1
straightURL <- paste0("http://football.fantasysports.yahoo.com/pickem/pickdistribution?gid=&week=", week)
confURL <- paste0(straightURL, "&type=c")
distConf_parsed <- read_html(confURL, encoding = "UTF-8") #, verbose = T)
distConfList <- html_text(html_nodes(distConf_parsed, "div div")) # "#bd"))
fansConfRaw <- stri_split_regex(distConfList, "\\n")
teams <- sapply(fansConfRaw[[1]][which(grepl("Percentage", fansConfRaw[[1]])) - 1], trimws)
teams <- sapply(teams, translate)
teams <- sapply(fansConfRaw[which(grepl("Percentage", fansConfRaw)) - 1], trimws)
teams <- sapply(teams, translate)
setwd("D:/WTP")
wtpNames <- read.delim("nflTeams.txt", header = F, stringsAsFactors = F)
teams <- sapply(teams, translate)
str(fansConfRaw)
distConf_parsed <- read_html(confURL, encoding = "UTF-8", verbose = T)
distConfList <- html_text(html_nodes(distConf_parsed, "div div")) # "#bd"))
fansConfRaw <- stri_split_regex(distConfList, "\\n")
fansConfRaw[146]
distConfList2 <- html_text(html_nodes(distConf_parsed, "#bd")) # "#bd"))
html_nodes(distConf_parsed, "div div")
html_text(html_nodes(distConf_parsed, "div div"))
google <- read_html("http://google.com", encoding = "ISO-8859-1")
google %>% xml_structure()
google %>% html_nodes("div")
distConf_parsed %>% xml_structure()
distConf_parsed %>% html_nodes("div")
distConf_parsed %>% html_nodes("div div")
distConf_parsed2 <- read_html(confURL, encoding = "ISO-8859-1", verbose = T)
distConf_parsed2 %>% xml_structure()
distConf_parsed2 %>% html_nodes("div div")
google %>% xml_structure()
distConf_parsed2 %>% html_nodes("div")
distConf_parsed2 <- read_html(confURL, encoding = "ISO-8859-1")
distConf_parsed2 %>% xml_structure()
distConf_parsed2 %>% html_nodes("div")
minimal <- read_html("<!doctype html>
<meta charset=utf-8>
<title>blah</title>
<p>I'm the content")
minimal
minimal %>% xml_structure()
html_form(read_html("https://hadley.wufoo.com/forms/libraryrequire-quiz/"))
html_form(read_html("https://hadley.wufoo.com/forms/r-journal-submission/"))
box_office <- read_html("http://www.boxofficemojo.com/movies/?id=ateam.htm")
box_office %>% html_node("form") %>% html_form()
box_office
box_office[1]
box_office[2]
box_office %>% html_node("form") %>% html_form()
box_office %>% html_node("form")
distConf_parsed2 %>% html_nodes(".bd")
bdVec <- distConf_parsed2 %>% html_nodes(".bd")
bdVec[19]
bdVec <- distConf_parsed2 %>% html_nodes("div div")
bdVec
rm(list = ls())
curwd <- getwd()
setwd("D:/WTP") #("C:/Users/Anichini/Documents")
suppressMessages(suppressWarnings(library(data.table)))
library(stringi)
library(rvest)
source("wtp_scrape.R")
system.time(genWeeklyCSV(1))
data <- read.csv("WEEK01_2016.csv", header=T, stringsAsFactors = F)
data
winprob <- data$WinProbability
confidence <- data$Confidence #*8
games<-length(winprob)
sims<-100000
points<-rep(0,sims)
for (i in 1:sims){
outcomes<-1*(runif(games,0,1)<winprob)
points[i]<-sum(outcomes*confidence)
}
quantile(points,c(.025,.5,.975))
setwd("D:/Documents/GitHub/confidence")
rm(list = ls())
setwd("D:/Documents/GitHub/confidence")
weekNum <- 1
csvFile <- paste0("D:/WTP/WEEK0", weekNum, "_2016.csv" )
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile(csvFile) #"2014week15.csv")
rm(list = ls())
setwd("D:/Documents/GitHub/confidence")
weekNum <- 1
csvFile <- paste0("D:/WTP/WEEK0", weekNum, "_2016.csv" )
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
processFile(csvFile) #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
#popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
system.time(resultsLists <- confTactics(results05))
updateTime <- paste0(as.character.Date(Sys.time())," ",
as.character.Date(Sys.timezone()))
typeof(updateTime)
saveFileName <-
ifelse(weekNum > 9, paste0("WTP_confidence/useWeeklyFile2016_", weekNum,
".RData"),
paste0("WTP_confidence/useWeeklyFile2016_0", weekNum,
".RData"))
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
rm(list = ls())
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
library(shiny); library(scales)
require(googleVis)
weekNum=1
fileName <- paste0("useWeeklyFile2016_", weekNum, ".RData")
load(fileName)
rm(list = ls())
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
library(shiny); library(scales)
require(googleVis)
weekNum=1
rm(list = ls())
setwd("D:/Documents/GitHub/confidence")
weekNum <- 1
csvFile <- paste0("D:/WTP/WEEK0", weekNum, "_2016.csv" )
load("fansimsSkeleton.RData")
load("altStuff.RData")
source("data_to_load.R") #getwd()
#processFile("~/WEEK10_2016.csv")  #
processFile(csvFile) #"2014week15.csv")
simDogs <- simDogs16
simFavs <- simFavs16
simOutcomes2 <- simOutcomes2_16
simPicks <- simPicks16
simplayerCols <- simplayerCols16
simPrior <- simPrior16
simRand <- simRand16
simRaw <- simRaw16
upsetMatrix <- upsetMatrix16
upsetDiagMatrix <- upsetDiagMatrix16
fanIndex <- fanIndex16
conditionGames(nGames = games)
genMtx() #strategies
simParams()
littleSim()
#popConfList <- function(size){list(size, calcWinners(size))}
results05 <- popConfList(5)
resultsLists <- rep(results05, 20)
# confTactics <- function(startList, maxSize = 100){
#   # maxSize must be divisible by 5
#   # startList <- results05
#   # maxSize <- 100
#
#   fanSizes <- seq(5, maxSize, by = 5)
#   maxIter <- maxSize/5
#   outList <- rep(startList, maxIter)
#
#   for(i in 1:maxIter)  { #i=1
#
#     size <- fanSizes[i]
#     genList <- popConfList(size)
#     outList[[2*(i - 1) + 1]] <- genList[[1]]
#     outList[[2*i]] <- genList[[2]]
#
#   }
#   outList
# }
system.time(resultsLists <- confTactics(results05))
updateTime <- paste0(as.character.Date(Sys.time())," ",
as.character.Date(Sys.timezone())) #typeof(updateTime)
saveFileName <-
ifelse(weekNum > 9, paste0("WTP_confidence/useWeeklyFile2016_", weekNum,
".RData"),
paste0("WTP_confidence/useWeeklyFile2016_0", weekNum,
".RData"))
save(resultsLists, gameRanks, strategies, weekFileConf, updateTime, file = fileName)
save(resultsLists, gameRanks, strategies, weekFileConf, updateTime, file = saveFileName)
rm(list = ls())
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
library(shiny); library(scales)
require(googleVis)
weekNum=1
fileName <- paste0("useWeeklyFile2016_", weekNum, ".RData")
load(fileName)
fileName <- paste0(ifelse(weekNum > 9, "useWeeklyFile2016_",
"useWeeklyFile2016_0"),
weekNum, ".RData")
rm(list = ls())
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
library(shiny); library(scales)
require(googleVis)
weekNum=1
fileName <- paste0(ifelse(weekNum > 9, "useWeeklyFile2016_",
"useWeeklyFile2016_0"),
weekNum, ".RData")
load(fileName)
nGames <- length(gameRanks)
favorites <- weekFileConf$Victor
rm(list = ls())
runApp()
runApp()
runApp()
?renderGvis
runApp()
rm(list = ls())
setwd("D:/Documents/GitHub/confidence/WTP_confidence")
library(shiny); library(scales)
require(googleVis)
weekNum=1
fileName <- paste0(ifelse(weekNum > 9, "useWeeklyFile2016_",
"useWeeklyFile2016_0"),
weekNum, ".RData")
load(fileName)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
